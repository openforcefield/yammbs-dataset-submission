# adapted from https://developers.zenodo.org/?python#quickstart-upload

import argparse
import json
import logging
import os

import requests
from requests.exceptions import JSONDecodeError

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

parser = argparse.ArgumentParser()
parser.add_argument("--title", "-t")
parser.add_argument("files", nargs="+")

URL = "https://zenodo.org"
TOKEN = os.environ["ZENODO_TOKEN"]

HEADERS = {"Authorization": f"Bearer {TOKEN}"}


def check_status(response, expect, fatal: bool):
    """Helper for checking that ``response.status_code`` matches ``expect``. If
    ``fatal`` is ``True``, raise an exception if ``expect`` is not matched."""
    if response.status_code != expect:
        try:
            body = response.json()
        except JSONDecodeError as e:
            body = e
        msg = f"Request failed ({response.status_code}), body: {body}"
        logger.error(msg)
        if fatal:
            raise Exception(msg)


def check_api_access(url, headers):
    logger.info("checking API access")
    r = requests.get(f"{url}/api/deposit/depositions", headers=headers)
    check_status(r, 200)


def create_empty_upload(url, headers):
    logger.info("creating an empty upload")
    r = requests.post(
        f"{url}/api/deposit/depositions",
        json={},
        headers=headers | {"Content-Type": "application/json"},
    )
    check_status(r, 201)
    return r.json()


def upload_file(bucket_url, filename, headers):
    logger.info(f"uploading file: `{filename}`")

    if not os.path.exists(filename):
        logger.error(f"provided filename `{filename}` does not exist")
        return

    with open(filename, "rb") as f:
        path = os.path.basename(filename)
        r = requests.put(f"{bucket_url}/{path}", data=f, headers=headers)
        check_status(r, 201)


def add_metadata(deposition_id, url, headers, title):
    logger.info("updating metadata")
    description = (
        "Generated by yammbs-dataset-submission: "
        "https://github.com/openforcefield/yammbs-dataset-submission"
    )
    data = {
        "metadata": {
            "title": title,
            "upload_type": "dataset",
            "description": description,
            "creators": [{"name": "OpenFF, YDS", "affiliation": "OMSF"}],
        }
    }
    r = requests.put(
        f"{URL}/api/deposit/depositions/{deposition_id}",
        headers=headers | {"Content-Type": "application/json"},
        data=json.dumps(data),
    )
    check_status(r, 200)


def main():
    args = parser.parse_args()

    check_api_access(URL, HEADERS)
    res = create_empty_upload(URL, HEADERS)

    bucket_url = res["links"]["bucket"]
    deposition_id = res["id"]

    for f in args.files:
        upload_file(bucket_url, f, HEADERS)

    add_metadata(deposition_id, URL, HEADERS, title=args.title)


if __name__ == "__main__":
    main()
